let G_DATA;
let startbefore = 0;
window.G_CONFIG = {};

addEventListener("DOMContentLoaded", () => {
  const G_JSON = JSON.parse(JSON.stringify(window.G_CONFIG));
  const refContainer = document.getElementById(G_JSON.ref);
  console.log(G_JSON, refContainer);

  fetch(G_JSON.api, { async: true })
    .then((response) => response.json())
    .then((data) => {
      var reversedKeys = []; // 新的数组
      var keys = Object.keys(data.ChannelMessageData); // 获取对象的所有键
      for (var i = 0; i < keys.length; i++) {
        // 遍历键
        var key = keys[i]; // 当前键
        reversedKeys.unshift(key); // 将键插入数组的开头，实现反转
      }
      var reversedData = []; // 新的数组
      for (var i = 0; i < reversedKeys.length; i++) {
        // 遍历反转后的键
        var key = reversedKeys[i]; // 当前键
        var value = data.ChannelMessageData[key]; // 当前值
        reversedData.push(value); // 将值插入数组的末尾
      }
      data.ChannelMessageData = reversedData;
      window.G_DATA = data;
      console.log(window.G_DATA);
      if (!Handlebars) {
        console.error("组件丢失: Handlebars");
      } else {
        const source = document.getElementById("template").innerHTML;
        const template = Handlebars.compile(source);
        const html = template(window.G_DATA);
        refContainer.innerText = ``;
        refContainer.insertAdjacentHTML("beforeend", html);
        document
          .getElementById("load-more")
          .addEventListener("click", loadMore);
        document.getElementById("load-more").style = "";
        if (window.G_DATA.nextBefore == 0) {
          const loadMoreButton = document.getElementById("load-more");
          loadMoreButton.remove();
        }
        startbefore = window.G_DATA.nextBefore;
        if (G_JSON.zoom) {
          if (mediumZoom) {
            mediumZoom("[data-zoomable]");
          } else {
            console.error("组件丢失: mediumZoom");
          }
        }
      }
    })
    .catch((error) => {
      refContainer.innerText = `我们遇到了一些错误，你可以刷新页面重试`;
      console.log(error)
    });

  function loadMore() {
    // 获取加载更多按钮的元素
    const loadMoreButton = document.getElementById("load-more");
    // 禁用加载更多按钮，防止重复点击
    loadMoreButton.disabled = true;
    // 获取 G_JSON.api 的值，并在末尾添加 startbefore 参数
    const api = G_JSON.api + "?startbefore=" + startbefore;
    // 使用 fetch 发送请求，获取数据
    fetch(api, { async: true })
      .then((response) => response.json())
      .then((data) => {
        // 如果 data.nextBefore 不为 0，说明还有更多数据，更新 startbefore 的值
        if (data.nextBefore !== 0) {
          startbefore = data.nextBefore;
        } else {
          // 否则，说明没有更多数据了，隐藏加载更多按钮
          loadMoreButton.style.display = "none";
        }
        // 其他的逻辑和你原来的代码一样，处理数据并渲染到网页上
        var reversedKeys = []; // 新的数组
        var keys = Object.keys(data.ChannelMessageData); // 获取对象的所有键
        for (var i = 0; i < keys.length; i++) {
          // 遍历键
          var key = keys[i]; // 当前键
          reversedKeys.unshift(key); // 将键插入数组的开头，实现反转
        }
        var reversedData = []; // 新的数组
        for (var i = 0; i < reversedKeys.length; i++) {
          // 遍历反转后的键
          var key = reversedKeys[i]; // 当前键
          var value = data.ChannelMessageData[key]; // 当前值
          reversedData.push(value); // 将值插入数组的末尾
        }
        data.ChannelMessageData = reversedData;
        window.G_DATA = data;
        console.log(window.G_DATA);
        if (!Handlebars) {
          console.error("组件丢失: Handlebars");
        } else {
          const source = document.getElementById("template").innerHTML;
          const template = Handlebars.compile(source);
          const html = template(window.G_DATA);
          // 使用 append 方法而不是 insertAdjacentHTML，这样可以在原有的内容后面追加新的内容，而不是覆盖
          refContainer.insertAdjacentHTML("beforeend", html);
          if (G_JSON.zoom) {
            if (mediumZoom) {
              mediumZoom("[data-zoomable]");
            } else {
              console.error("组件丢失: mediumZoom");
            }
          }
        }
        // 启用加载更多按钮，准备下一次点击
        loadMoreButton.disabled = false;
      })
      .catch((error) => {
        refContainer.innerText = `我们遇到了一些错误，你可以刷新页面重试`;
      });
  }
});
